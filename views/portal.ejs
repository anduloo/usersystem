<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>应用门户</title>
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/portal.css">
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>
                <i class="fa fa-th-large"></i>
                应用门户
            </h1>
            <div class="user-info" id="user-info">
                <!-- 用户信息由JS填充 -->
            </div>
        </header>
        
        <main>
            <div id="app-container">
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                </div>
            </div>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const tokenKey = 'jwt_token';
            const userInfoContainer = document.getElementById('user-info');
            const appContainer = document.getElementById('app-container');
            const loginUrl = `/login`;
            
            let token = null;
            
            // 从URL获取token
            const params = new URLSearchParams(window.location.search);
            const tokenFromUrl = params.get('token');
            
            if (tokenFromUrl) {
                localStorage.setItem(tokenKey, tokenFromUrl);
                window.history.replaceState({}, document.title, window.location.pathname);
                token = tokenFromUrl;
            } else {
                token = localStorage.getItem(tokenKey);
            }
            
            if (!token) {
                window.location.href = loginUrl;
                return;
            }
            
            // 获取门户数据
            fetch('/api/portal', {
                headers: { 'Authorization': `Bearer ${token}` }
            })
            .then(response => {
                if (response.status === 401) {
                    localStorage.removeItem(tokenKey);
                    window.location.href = loginUrl;
                    throw new Error('认证失败');
                }
                if (!response.ok) throw new Error('获取数据失败');
                return response.json();
            })
            .then(data => {
                renderUserInfo(data.user);
                renderApps(data.projects, data.defaultApps);
            })
            .catch(error => {
                appContainer.innerHTML = `
                    <div class="error-message">
                        <i class="fa fa-exclamation-triangle"></i>
                        加载应用失败，请尝试刷新或重新登录
                    </div>
                `;
            });
            
            function renderUserInfo(user) {
                if (!user) return;
                userInfoContainer.innerHTML = `
                    <span>欢迎，${user.name || user.email}</span>
                    <button class="logout-btn" id="logout-button">
                        <i class="fa fa-sign-out"></i>
                        退出登录
                    </button>
                `;
                
                document.getElementById('logout-button').onclick = () => {
                    localStorage.removeItem(tokenKey);
                    window.location.href = loginUrl;
                };
            }
            
            function renderApps(projects = [], defaultApps = []) {
                const allApps = [...defaultApps, ...projects];
                
                if (allApps.length === 0) {
                    appContainer.innerHTML = `
                        <div class="empty-state">
                            <i class="fa fa-folder-open"></i>
                            <h3>暂无应用</h3>
                            <p>您目前没有被分配到任何应用</p>
                        </div>
                    `;
                    return;
                }
                
                let html = '<div class="apps-grid">';
                
                allApps.forEach(app => {
                    const icon = getAppIcon(app.name);
                    html += `
                        <a href="#" class="app-card" data-url="${app.url}" data-id="${app.id || ''}">
                            <h3>
                                <i class="fa ${icon}"></i>
                                ${app.name}
                            </h3>
                            <p>${app.description || '点击访问此应用'}</p>
                            <div class="app-meta">
                                <i class="fa fa-external-link"></i>
                                <span>点击访问</span>
                            </div>
                        </a>
                    `;
                });
                
                html += '</div>';
                appContainer.innerHTML = html;
                
                // 绑定点击事件
                document.querySelectorAll('.app-card').forEach(card => {
                    card.onclick = async (e) => {
                        e.preventDefault();
                        const url = card.getAttribute('data-url');
                        const projectId = card.getAttribute('data-id');
                        
                        if (projectId) {
                            try {
                                await fetch('/api/users/visit-project', {
                                    method: 'POST',
                                    headers: { 
                                        'Content-Type': 'application/json', 
                                        'Authorization': `Bearer ${token}` 
                                    },
                                    body: JSON.stringify({ projectId: Number(projectId) })
                                });
                            } catch (error) {
                                console.error('记录访问日志失败:', error);
                            }
                        }
                        
                        if (url) {
                            window.location.href = url;
                        }
                    };
                });
            }
            
            function getAppIcon(appName) {
                const name = appName.toLowerCase();
                if (name.includes('管理') || name.includes('admin')) return 'fa-cogs';
                if (name.includes('数据') || name.includes('data')) return 'fa-database';
                if (name.includes('报表') || name.includes('report')) return 'fa-bar-chart';
                if (name.includes('用户') || name.includes('user')) return 'fa-users';
                if (name.includes('系统') || name.includes('system')) return 'fa-desktop';
                if (name.includes('设置') || name.includes('setting')) return 'fa-cog';
                if (name.includes('文件') || name.includes('file')) return 'fa-folder';
                if (name.includes('消息') || name.includes('message')) return 'fa-envelope';
                return 'fa-cube'; // 默认图标
            }
        });
    </script>
</body>
</html>

