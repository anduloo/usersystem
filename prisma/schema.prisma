generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                 @id @default(autoincrement())
  email                     String              @unique
  password                  String
  name                      String?
  role                      String              @default("USER")
  wechatOpenId              String?             @unique
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  isActive                  Boolean             @default(true)
  isSuperAdmin              Boolean             @default(false)
  currentSession            String?
  tokenVersion              Int                 @default(0)
  emailConfirmed            Boolean             @default(false)
  emailConfirmToken         String?             @unique @db.VarChar(255)
  emailConfirmTokenExpires  DateTime?           @db.Timestamp(6)
  resetPasswordToken        String?             @unique @db.VarChar(255)
  resetPasswordTokenExpires DateTime?           @db.Timestamp(6)
  projectAssignments        ProjectAssignment[]
  sentMessages     Message[] @relation("MessageFromUser")
  receivedMessages Message[] @relation("MessageToUser")
}

model Project {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  description           String?
  url                   String?
  projectAssignments    ProjectAssignment[]
  userProjectAccessLogs UserProjectAccessLog[]
}

model ProjectAssignment {
  userId     Int
  projectId  Int
  assignedAt DateTime @default(now())
  assignedBy String?
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model AdminLog {
  id         Int      @id @default(autoincrement())
  adminId    Int
  action     String
  targetType String
  targetId   Int?
  detail     String?
  createdAt  DateTime @default(now())
}

model UserLoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  ip        String?
  userAgent String?
  city      String?
  createdAt DateTime @default(now())
}

model UserProjectAccessLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  city      String?  @db.VarChar
  project   Project  @relation(fields: [projectId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  fromUserId Int
  toUserId   Int?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  fromUser   User     @relation("MessageFromUser", fields: [fromUserId], references: [id])
  toUser     User?    @relation("MessageToUser", fields: [toUserId], references: [id])
}

model SystemConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}
